_format_version: "2.1"
_transform: true

consumers:
  - username: identity-service
    custom_id: "1234"

jwt_secrets:
  - consumer: identity-service
    key: identity
    secret: "2a44e102d3ba26aee08b8245079b767093e65b3341b60de2b1d5507fff790ff1"
    algorithm: "HS256"  
    # `secret_is_base64: false` is deprecated and not needed for plain hex secrets

services:
  - name: identity_service
    url: https://identity0.azurewebsites.net
    routes:
      - name: all_routes
        paths: ["/identity"]
        methods: ["GET", "POST", "PUT", "DELETE"]
        strip_path: true

  - name: billing_service
    url: https://billingservice1.azurewebsites.net
    routes:
      - name: all_routes_
        paths: ["/billing"]
        methods: ["GET", "POST", "PUT", "DELETE"]
        strip_path: true

  - name: referencenumber_service
    url: https://refererencenumber-akcug4h4d4fff8d9.canadacentral-01.azurewebsites.net
    routes:
      - name: all_routes__
        paths: ["/reference-number"]
        methods: ["GET", "POST", "PUT", "DELETE"]
        strip_path: true

  - name: wallet
    url: https://e-wallet.azurewebsites.net
    routes:
      - name: transactions
        paths: ["/transactions"]
        methods: ["GET", "POST", "PUT", "DELETE"]
        strip_path: true
    plugins:
      - name: jwt
        config:
          run_on_preflight: true
          header_names: ["Authorization"]
      
      # Fixed pre-function plugin
      - name: pre-function
        config:
          access:
            - |
              -- Alternative JWT decoding without cjson
              local auth_header = kong.request.get_header("Authorization")
              if auth_header then
                local jwt_token = auth_header:match("Bearer%s+(.+)")
                if jwt_token then
                  -- Extract payload part
                  local _, payload_end = jwt_token:find("%.")
                  if payload_end then
                    local payload_b64 = jwt_token:sub(payload_end + 1, jwt_token:find("%.", payload_end + 1) - 1)
                    -- Base64 URL decode with padding
                    payload_b64 = payload_b64:gsub("-", "+"):gsub("_", "/")
                    local padding = #payload_b64 % 4
                    if padding > 0 then
                      payload_b64 = payload_b64 .. string.rep("=", 4 - padding)
                    end
                    local payload_json = ngx.decode_base64(payload_b64)
                    
                    -- Simple JSON parsing (works for flat structures)
                    if payload_json then
                      local user_id = payload_json:match('"user_id"%s*:%s*(%d+)')
                          or payload_json:match('"sub"%s*:%s*"([^"]+)"')
                      local iss = payload_json:match('"iss"%s*:%s*"([^"]+)"')
                      
                      if user_id then
                        kong.service.request.set_header("X-User-Id", user_id)
                      end
                      if iss then
                        kong.service.request.set_header("X-JWT-Issuer", iss)
                      end
                    end
                  end
                end
              end
    

    
# plugins:
# - name: rate-limiting
#   config:
#     minute: 100          # 100 requests per minute
#     policy: local
    # identifier: jwt:sub  # Rate limit by user ID from JWT
# - name: proxy-cache
#   config:
#     cache_ttl: 300  # Cache for 5 minutes
#     strategy: memory
# - name: cors
#   config:
#     origins: ["*"]           # Adjust to specific domains in production
#     methods: ["GET", "POST", "PUT", "DELETE"]    
#     credentials: true       # Allow JWT in credentials
# - name: file-log
#   config:
#     path: /var/log/api-gateway.log  # ensure that the log file path (/var/log/api-gateway.log) is writable by the Kong process.
#     log_body: true

